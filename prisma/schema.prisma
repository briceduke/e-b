// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["extendedWhereUnique"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    rooms         Room[] 
    ownedRooms    Room[]    @relation("RoomOwner")

    invites       Invite[]

    hangoutLists  HangoutList[]

    votes HangoutList[] @relation("Vote")

    activeRoomId  String?

    premium       Boolean @default(false)

    @@index([id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    name         String

    users        User[]
    owner        User     @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String

    invites      Invite[]
    hangoutLists  HangoutList[]

    tier         Int @default(0)

    @@index([id, ownerId])
}

model Invite {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    String

    expires    DateTime

    @@index([id, roomId])
}

model HangoutList {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    items       HangoutItem[]
    votingEnded Boolean  @default(false)
    votesCount  Int @default(0)

    voted       User[] @relation("Vote")

    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId      String

    @@index([id, roomId, createdById])
}

model HangoutItem {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    hangoutList   HangoutList @relation(fields: [hangoutListId], references: [id], onDelete: Cascade)
    hangoutListId String

    content       String
    points        Int         @default(0)
    
    @@index([hangoutListId, id])
}